##
## generic mesh2hdf5 configuration file
##

# ucvm2mesh's conf file
ucvm2mesh=ucvm2mesh.conf

# Four corners, Optional
ne_coord=-122.562365, 39.174505)
nw_coord=(-123.858493, 38.424179)
sw_coord=(-121.922036, 36.320331)
se_coord=(-120.644051, 37.050062)

# distance in meter for each dim
x=290000
y=140000
z=40000

       ATTRS = {
            "title": lambda nc: getattr(nc, "title", "unknown").strip(),
            "id": lambda nc: getattr(nc, "id", "unknown").strip(),
            "description": lambda nc: getattr(nc, "summary", "").strip(),
            "keywords": lambda nc: [kw.strip() for kw in getattr(nc, "keywords", "").split(",")],
            "history": lambda nc: getattr(nc, "history", "").strip(),
            "comment": lambda nc: getattr(nc, "comment", "").strip(),
            "version": lambda nc: getattr(nc, "data_revision", "unknown").strip(),
            "creator_name": lambda nc: getattr(nc, "author_name", getattr(nc, "creator_name", "")).
strip(),
            "creator_email": lambda nc: getattr(nc, "author_email", getattr(nc, "creator_email", ""
)).strip(),
            "creator_institution": lambda nc: getattr(nc, "author_institution", getattr(nc, "creato
r_institution", "")).strip(),
            "authors": lambda nc: list_from_attr(nc, "author_name"),
            "acknowledgement": lambda nc: getattr(nc, "acknowledgement", "").strip(),
            "references": lambda nc: list_from_attr(nc, "reference"),
            "license": lambda nc: getattr(nc, "license", "").strip(),
        }



   reetrieve from ucvm2mesh..
       self.config["coordsys"] = {
            "crs": "EPSG:4979",
            "origin_x": self.emc.geospatial_lon_min,
            "origin_y": self.emc.geospatial_lat_min,
            "y_azimuth": 0.0,
        }
       self.config["domain"].update({
            "dim_x": lon_max - lon_min,
            "dim_y": lat_max - lat_min,
            "dim_z": (depth_max - depth_min) * vertical_scale,
            "blocks": ["block"],
        })


       info = {
            "x_resolution": (lon_max - lon_min) / (self.emc.variables["longitude"].size-1),
            "y_resolution": (lat_max - lat_min) / (self.emc.variables["latitude"].size-1),
            "z_top_offset": 0.0,
        }

